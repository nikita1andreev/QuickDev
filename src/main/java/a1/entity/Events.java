package a1.entity;
// Generated 28.04.2015 1:36:56 by Hibernate Tools 4.3.1


//import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Date;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import com.sun.istack.Nullable;

import sk.ui.ut;
//import org.apache.derby.client.am.DateTime;

/**
 * Events generated by hbm2java
 */

@Entity
@Table(name="events")
public class Events  implements java.io.Serializable {

    
     
     private Integer id;
     private String name;
     //@Temporal(TemporalType.TIMESTAMP)
     private Date start;
     private String description;
     private String linkType;
     private Event_types type;
     private Responsible responsible;
     
     private Integer linkObject;
     
     //private Integer linkVersion;
     //private Versions Version;
     private Date end;

    public Events() {
    }

	
    public Events(String description) {
        this.description = description;
    }
    public Events(String name, LocalDateTime start, String description, String linkType, Integer linkObject, LocalDateTime end,Event_types type) {
       this.name = name;
       this.start = ut.toDate(start);
       this.description = description;
       this.linkType = linkType;
       this.linkObject = linkObject;
       this.end = ut.toDate(end);
       this.type = type;
    }
    
@Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)    
    @Column(name = "id")     
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
   
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    public LocalDateTime getStart_ldt() {
        if (this.start == null) return LocalDateTime.of(1, 1, 1, 1, 1); else
        return  ut.toLdt(this.start);//.toLocalDateTime();
    }

    public Date getStart() {        
        return  this.start;
    }
    
    public void setStart_ldt(LocalDateTime start) {
        if (start != null) 
        this.start = ut.toDate(start);
    }
    
    public void setStart(Date start) {
        this.start = ut.toDate(start);
    }
    
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    public String getLinkType() {
        return this.linkType;
    }
    
    public void setLinkType(String linkType) {
        this.linkType = linkType;
    }

    

    public Integer getLinkObject() {
        return this.linkObject;
    }
    
    public void setLinkObject(Integer linkObject) {
        this.linkObject = linkObject;
    }
    
        
@ManyToOne(targetEntity = Responsible.class,cascade = {CascadeType.ALL})//,cascade={CascadeType.REFRESH},fetch=FetchType.EAGER,optional=true)//, cascade = {CascadeType.ALL},optional=false)//, fetch =FetchType.LAZY)
@NotFound(action=NotFoundAction.IGNORE)
@JoinColumn(name = "responsible",   referencedColumnName="id",nullable=true,insertable=false,updatable=false
)    

    public Responsible getResponsible() {
        return responsible;
    }
    
    public void setResponsible(Responsible responsible) {
        this.responsible = responsible;
    }
    
@ManyToOne(targetEntity = Event_types.class,cascade = {CascadeType.ALL})//,cascade={CascadeType.REFRESH},fetch=FetchType.EAGER,optional=true)//, cascade = {CascadeType.ALL},optional=false)//, fetch =FetchType.LAZY)
@NotFound(action=NotFoundAction.IGNORE)
@JoinColumn(name = "type",   referencedColumnName="id",nullable=true,insertable=false,updatable=false
)    

    public Event_types getType() {
        return type;
    }
    
    public void setType(Event_types Type) {
        this.type = Type;
    }

    
    public Date getEnd() {
        return ut.toDate(this.end);
    }
        
    public LocalDateTime getEnd_ldt() {
        if (this.end == null) return LocalDateTime.of(1, 1, 1, 1, 1); else
        return ut.toLdt(this.end);
    }

    public void setEnd(Date end) {
        this.end = ut.toDate(end);
    }
        
    public void setEnd_ldt(LocalDateTime end) {
         if (end != null) 
        this.end = ut.toDate(end);
    }

    
    public String toString()
    {
        return getName();
    }
    
    public enum event_status {
        EVENT_PLANNED(0), EVENT_DONE(1), EVENT_CANCELED(2),EVENT_POSTPONED(3);

        private int value;

        event_status(int value) { this.value = value; }    

        public int getValue() { return value; }

        public static event_status parse(int id) {
        	event_status status = null; // Default
            for (event_status item : event_status.values()) {
                if (item.getValue()==id) {
                	status = item;
                    break;
                }
            }
            return status;
        }
        public String toString()
        {
        	if (value==EVENT_PLANNED.value) return "Запланировано";
        	if (value==EVENT_DONE.value) return "Завершено";
        	if (value==EVENT_CANCELED.value) return "Отменено";
        	if (value==EVENT_POSTPONED.value) return "Отложено";
        	return "";
        }

    };
    
    @Column(name = "status",nullable=true,updatable=true)
    private int status;
        
    public event_status getStatus () {
        return event_status.parse(this.status);
    }
    public void setStatus (event_status st) {
    	if (st==null) this.status =0;
    	else 
        this.status = st.getValue();
    }
    
}


